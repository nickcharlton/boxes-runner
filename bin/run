#!/usr/bin/env ruby

begin
  require 'bundler/setup'
rescue LoadError
  puts 'You must `gem install bundler` and `bundle install` to run this.'
end

require 'atlas'

def die(message = nil)
  $stderr.puts "#{$PROGRAM_NAME} failed with code: #{$CHILD_STATUS}"
  $stderr.puts "#{message}" if message
  exit 1
end

# ensure we know which to build
die('box argument must be provided') unless ARGV.length == 1

# collect everything we need
start_time = ENV['BOXES_START_TIME'] || Time.now.utc
boxes_version = '2.0.0'
box_name = ARGV[0]
box_version = "#{boxes_version}.#{start_time.strftime('%Y%m%d%H%M%S')}"
providers = %w(virtualbox vmware)

# run a build for each provider
providers.each do |provider|
  Dir.chdir('boxes') do
    puts "Starting build for: #{box_name}-#{provider}..."
    $stdout.flush

    system("rake build:#{box_name}-#{provider}") ||
      die("Unable to build: #{box_name}-#{provider}")
  end
end

# setup Atlas and upload them
Atlas.configure do |config|
  config.access_token = ENV['ATLAS_TOKEN'] || ''
end

puts 'Fetching box details from Atlas...'
$stdout.flush
box = Atlas::Box.find("boxesio/#{box_name}")

puts "Creating version: #{box_version}..."
$stdout.flush
version = box.create_version(version: box_version)

# create new providers for each provider
providers.each do |name|
  file = File.open("boxes/#{box_name}-#{name}.box")

  puts "Creating provider: #{name}..."
  $stdout.flush
  provider = version.create_provider(name: name)

  puts 'Uploading...'
  $stdout.flush
  provider.upload(file)

  file.close
end

# release the version
puts 'Releasing version...'
$stdout.flush
version.release

# and done
puts 'Run complete.'
puts "Built #{box_name} (#{providers.join(' ')}) successfully."
$stdout.flush

exit 0
